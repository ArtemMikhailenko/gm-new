import { TOKEN_URL } from "@/src/config";

export default async function handler(req: any, res: any) {
  if (req.method !== "POST") {
    return res.status(405).json({ error: "Method Not Allowed" });
  }

  const url = TOKEN_URL;

  if (!url) {
    console.error("‚ùå TOKEN_URL –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ .env!");
    return res.status(500).json({ error: "Server configuration error" });
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
  const { authCode, verifier, redirectUri } = req.body;

  if (!authCode || !verifier) {
    console.error("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –∑–∞–ø—Ä–æ—Å–µ");
    return res.status(400).json({
      error: "Missing required parameters",
      details: {
        hasAuthCode: !!authCode,
        hasVerifier: !!verifier,
        hasRedirectUri: !!redirectUri,
      },
    });
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–æ—Å –¥—É–±–ª–∏–∫–∞—Ç–æ–º
  const requestId = `${authCode.substring(0, 10)}_${Date.now()}`;
  console.log(`üìù –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ ${requestId}`);

  // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ redirectUri –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏—à–Ω–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
  const cleanRedirectUri = redirectUri
    ? redirectUri.split("?")[0]
    : redirectUri;

  console.log("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Twitter API:", {
    url,
    bodyLength: JSON.stringify(req.body).length,
    hasAuthCode: !!authCode,
    hasVerifier: !!verifier,
    hasRedirectUri: !!cleanRedirectUri,
    authCodeLength: authCode?.length,
    verifierLength: verifier?.length,
  });

  try {
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –≥–æ–Ω–∫–∏ —É—Å–ª–æ–≤–∏–π
    const randomDelay = Math.floor(Math.random() * 100);
    await new Promise((resolve) => setTimeout(resolve, randomDelay));

    // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ —Å –æ—á–∏—â–µ–Ω–Ω—ã–º redirectUri
    const modifiedBody = {
      ...req.body,
      redirectUri: cleanRedirectUri,
    };

    const response = await fetch(url, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
        "X-Request-ID": requestId,
        "Cache-Control": "no-cache, no-store",
        Pragma: "no-cache",
      },
      body: JSON.stringify(modifiedBody),
    });

    console.log(`üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç Twitter API –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ ${requestId}:`, {
      status: response.status,
      statusText: response.statusText,
      headers: Object.fromEntries(response.headers.entries()),
    });

    // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ –∫–∞–∫ —Ç–µ–∫—Å—Ç
    const responseText = await response.text();
    console.log(`üìÑ –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ ${requestId}:`, responseText);

    // –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –≤ JSON
    let data;
    try {
      data = JSON.parse(responseText);
    } catch (parseError) {
      console.error(
        `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ JSON –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ ${requestId}:`,
        parseError
      );
      return res.status(response.status).json({
        error: "Invalid JSON response from server",
        originalResponse: responseText,
        requestId,
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–∫–∏ –≤ –æ—Ç–≤–µ—Ç–µ
    if (data.error || data.success === false) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ API –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ ${requestId}:`, data);

      // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º –∫–æ–¥–æ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
      if (
        data.error?.error === "invalid_request" ||
        (data.error?.error_description &&
          data.error.error_description.includes("authorization code"))
      ) {
        return res.status(400).json({
          ...data,
          message: "–ö–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —É–∂–µ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∏–ª–∏ –∏—Å—Ç–µ–∫",
          requestId,
        });
      }

      return res.status(400).json({
        ...data,
        requestId,
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–æ–ª–µ–π –≤ –æ—Ç–≤–µ—Ç–µ
    if (!data.username || !data.user_id) {
      console.error(
        `‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è –≤ –æ—Ç–≤–µ—Ç–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ ${requestId}:`,
        data
      );
      return res.status(400).json({
        error: "Missing required fields in response",
        originalResponse: data,
        requestId,
      });
    }

    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∑–∞–ø—Ä–æ—Å ${requestId}`);
    return res.status(response.status).json({
      ...data,
      requestId,
    });
  } catch (error: any) {
    console.error(
      `‚ùå Proxy error –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ ${requestId}:`,
      error.message || error
    );
    return res.status(500).json({
      error: "Internal Server Error",
      message: error.message || "Unknown error",
      stack: process.env.NODE_ENV === "development" ? error.stack : undefined,
      requestId,
    });
  }
}
