import { useCallback } from "react";
import { useWeb3 } from "@/src/hooks/useWeb3";
import { CURRENT_CHAIN, TOKEN_URL, TWITTER_CLIENT_ID } from "@/src/config";
import { generateCodeVerifier, generateCodeChallenge } from "@/src/utils/auth";

interface WalletActionsParams {
  connect: () => Promise<void>;
  setModalState: (
    state: "loading" | "error" | "success" | "wrongNetwork" | null
  ) => void;
  setErrorMessage: (message: string | null) => void;
  setTwitterName?: (name: string | null) => void;
  setVerifier?: (verifier: string) => void;
  setIsWrongNetwork?: (state: boolean) => void;
  setUser: (name: string | null) => void;
}

export const useWalletActions = ({
  connect,
  setModalState,
  setErrorMessage,
  setTwitterName,
  setUser,
  setIsWrongNetwork,
}: WalletActionsParams) => {
  const { disconnect, connectedChain, getProvider, web3Onboard } = useWeb3();

  const handleSwitchNetwork = useCallback(async () => {
    console.log("handleSwitchNetwork");

    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º web3Onboard –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å–µ—Ç–∏
      const success = await web3Onboard?.setChain({
        chainId: CURRENT_CHAIN.hexId,
      });

      if (success) {
        console.log(
          `‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ —Å–µ—Ç—å ${CURRENT_CHAIN.label} (${CURRENT_CHAIN.id})`
        );
        setIsWrongNetwork?.(false);
        setModalState(null);
        return true;
      } else {
        console.error(
          `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ —Å–µ—Ç—å ${CURRENT_CHAIN.label}`
        );
        setErrorMessage(
          `–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ —Å–µ—Ç—å ${CURRENT_CHAIN.label}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ —Å–µ—Ç—å –≤—Ä—É—á–Ω—É—é –≤ –≤–∞—à–µ–º –∫–æ—à–µ–ª—å–∫–µ.`
        );
        setModalState("error");
        return false;
      }
    } catch (switchError: any) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Å–µ—Ç–∏:", switchError);
      setErrorMessage(
        `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Å–µ—Ç–∏: ${
          switchError.message || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
        }`
      );
      setModalState("error");
      return false;
    }
  }, [web3Onboard, setIsWrongNetwork, setModalState, setErrorMessage]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ —Å–µ—Ç–∏
  const checkNetwork = useCallback(async () => {
    if (!connectedChain) {
      console.log("‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω–æ–π —Å–µ—Ç–∏");
      return false;
    }

    const currentChainId = parseInt(connectedChain.id, 16);
    const targetChainId = CURRENT_CHAIN.id;

    console.log(
      `üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–∏: —Ç–µ–∫—É—â–∞—è ${currentChainId}, —Ü–µ–ª–µ–≤–∞—è ${targetChainId}`
    );

    if (currentChainId !== targetChainId) {
      console.log(
        `‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å–µ—Ç—å: ${currentChainId}, —Ç—Ä–µ–±—É–µ—Ç—Å—è ${targetChainId}`
      );
      setIsWrongNetwork?.(true);
      return false;
    }

    console.log(
      `‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å–µ—Ç—å: ${CURRENT_CHAIN.label} (${targetChainId})`
    );
    setIsWrongNetwork?.(false);
    return true;
  }, [connectedChain, setIsWrongNetwork]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–µ—Ç–∏
  const setupNetworkMonitoring = useCallback(() => {
    if (typeof window === "undefined" || !window.ethereum) return () => {};

    const handleChainChanged = (chainId: string | unknown) => {
      if (typeof chainId !== "string") return;

      const newChainId = parseInt(chainId, 16);
      console.log(`üîÑ –°–µ—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: ${newChainId}`);

      if (newChainId !== CURRENT_CHAIN.id) {
        console.log(
          `‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å–µ—Ç—å: ${newChainId}, —Ç—Ä–µ–±—É–µ—Ç—Å—è ${CURRENT_CHAIN.id}`
        );
        setIsWrongNetwork?.(true);
      } else {
        console.log(
          `‚úÖ –°–µ—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±—É–µ–º–æ–π: ${CURRENT_CHAIN.label} (${CURRENT_CHAIN.id})`
        );
        setIsWrongNetwork?.(false);
      }
    };

    // @ts-ignore - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —Ç–∏–ø–∏–∑–∞—Ü–∏–∏ –¥–ª—è ethereum
    window.ethereum.on("chainChanged", handleChainChanged);

    return () => {
      if (window.ethereum) {
        // @ts-ignore - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —Ç–∏–ø–∏–∑–∞—Ü–∏–∏ –¥–ª—è ethereum
        window.ethereum.removeListener("chainChanged", handleChainChanged);
      }
    };
  }, [setIsWrongNetwork]);

  const handleReconnectWallet = useCallback(
    async (setWalletAdd: any) => {
      try {
        await disconnect();
        await connect();
        const walletAddress = localStorage.getItem("walletAddress");
        setWalletAdd(walletAddress || "");
        setModalState(null);
        return walletAddress;
      } catch (error) {
        setErrorMessage("Failed to reconnect wallet");
        setModalState("error");
      }
    },
    [disconnect, connect, setModalState, setErrorMessage]
  );

  const handleReconnectTwitter = useCallback(async () => {
    try {
      console.log("–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Twitter...");

      // –û—á–∏—â–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      sessionStorage.removeItem("code");
      sessionStorage.removeItem("verifier");
      sessionStorage.removeItem("auth_processed");
      sessionStorage.removeItem("auth_processing");
      sessionStorage.removeItem("redirect_uri");
      sessionStorage.removeItem("oauth_state");

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π code_verifier —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º crypto API
      let codeVerifier = "";
      const array = new Uint8Array(64);
      window.crypto.getRandomValues(array);
      codeVerifier = Array.from(array, (byte) =>
        ("0" + (byte & 0xff).toString(16)).slice(-2)
      ).join("");

      // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –¥–ª–∏–Ω–∞ verifier —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º (43-128 —Å–∏–º–≤–æ–ª–æ–≤)
      if (codeVerifier.length > 128) {
        codeVerifier = codeVerifier.substring(0, 128);
      } else if (codeVerifier.length < 43) {
        // –î–æ–ø–æ–ª–Ω—è–µ–º –¥–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã
        while (codeVerifier.length < 43) {
          codeVerifier += Math.random().toString(36).substring(2);
        }
        codeVerifier = codeVerifier.substring(0, 128);
      }

      console.log("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω code_verifier –¥–ª–∏–Ω–æ–π:", codeVerifier.length);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º verifier –≤ sessionStorage
      sessionStorage.setItem("verifier", codeVerifier);

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º code_challenge
      const codeChallenge = await generateCodeChallenge(codeVerifier);
      console.log("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω code_challenge");

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º state –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç CSRF
      const state =
        Math.random().toString(36).substring(2, 15) +
        Math.random().toString(36).substring(2, 15);
      sessionStorage.setItem("oauth_state", state);

      // –°–æ–∑–¥–∞–µ–º redirect_uri –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ URL
      const redirectUri = window.location.origin + window.location.pathname;
      sessionStorage.setItem("redirect_uri", redirectUri);

      // –ö–æ–¥–∏—Ä—É–µ–º redirect_uri –¥–ª—è URL
      const encodedRedirectUri = encodeURIComponent(redirectUri);

      // –§–æ—Ä–º–∏—Ä—É–µ–º URL –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Twitter
      const twitterAuthUrl = `https://x.com/i/oauth2/authorize?response_type=code&client_id=${TWITTER_CLIENT_ID}&redirect_uri=${encodedRedirectUri}&scope=users.read%20tweet.read&state=${state}&code_challenge=${codeChallenge}&code_challenge_method=S256`;

      console.log(
        "–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ URL –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Twitter:",
        twitterAuthUrl
      );

      // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Twitter
      window.location.href = twitterAuthUrl;
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ Twitter:", error);
      setErrorMessage("Failed to reconnect Twitter");
      setModalState("error");
    }
  }, [setErrorMessage, setModalState, setUser]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –∑–∞–ø—Ä–æ—Å–∞ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
  const retryWithDelay = async (
    fn: () => Promise<any>,
    retries = 3,
    delay = 1000
  ) => {
    try {
      return await fn();
    } catch (error) {
      if (retries <= 0) {
        throw error;
      }
      console.log(
        `–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ ${delay}–º—Å, –æ—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: ${retries}`
      );
      await new Promise((resolve) => setTimeout(resolve, delay));
      return retryWithDelay(fn, retries - 1, delay * 1.5);
    }
  };

  const handleFetchTwitterAccessToken = useCallback(
    async (code: string, verifier: string) => {
      const url = TOKEN_URL;
      if (!url) {
        console.error("‚ùå TOKEN_URL –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ .env!");
        throw new Error("–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞: TOKEN_URL –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω");
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —ç—Ç–æ—Ç –∫–æ–¥ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
      const processedCodes = JSON.parse(
        sessionStorage.getItem("processed_auth_codes") || "[]"
      );
      if (processedCodes.includes(code)) {
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ localStorage, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        const cachedUsername = localStorage.getItem("twitterName");
        if (cachedUsername) {
          return cachedUsername;
        }
      }

      // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π redirect_uri - –í–ê–ñ–ù–û –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ—á–Ω–æ —Ç–∞–∫–æ–π –∂–µ URI, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫–æ–¥–∞
      const redirectUri =
        sessionStorage.getItem("redirect_uri") ||
        window.location.origin + window.location.pathname;

      // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ redirect_uri –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏—à–Ω–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
      const cleanRedirectUri = redirectUri.split("?")[0];
      console.log(
        "–ò—Å–ø–æ–ª—å–∑—É–µ–º redirect_uri –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Ç–æ–∫–µ–Ω–∞:",
        cleanRedirectUri
      );

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
      const requestId = `${code.substring(0, 5)}_${Date.now()}`;
      console.log(`üìù –ó–∞–ø—Ä–æ—Å —Ç–æ–∫–µ–Ω–∞ Twitter [${requestId}]`);

      console.log(
        "–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ Twitter —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:"
      );
      console.log("- URL:", url);
      console.log(
        "- Code:",
        code.substring(0, 5) + "..." + code.substring(code.length - 5)
      );
      console.log(
        "- Verifier:",
        verifier.substring(0, 5) +
          "..." +
          verifier.substring(verifier.length - 5)
      );
      console.log("- Redirect URI:", cleanRedirectUri);
      console.log("- Request ID:", requestId);

      try {
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–¥ –≤ —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å—Ä–∞–∑—É, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        if (!processedCodes.includes(code)) {
          processedCodes.push(code);
          sessionStorage.setItem(
            "processed_auth_codes",
            JSON.stringify(processedCodes)
          );
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é —Å–ª—É—á–∞–π–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –≥–æ–Ω–∫–∏ —É—Å–ª–æ–≤–∏–π
        const randomDelay = Math.floor(Math.random() * 100);
        await new Promise((resolve) => setTimeout(resolve, randomDelay));

        const requestBody = {
          authCode: code,
          verifier: verifier,
          redirectUri: cleanRedirectUri,
        };

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ —Å –º–µ–Ω—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–æ–≤—Ç–æ—Ä–æ–≤
        const data = await retryWithDelay(async () => {
          const response = await fetch(url, {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
              "Cache-Control": "no-cache, no-store",
              Pragma: "no-cache",
              "X-Request-ID": requestId,
            },
            body: JSON.stringify(requestBody),
          });

          console.log(`üì• –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ [${requestId}]:`, response.status);

          if (!response.ok) {
            let errorText;
            try {
              errorText = await response.text();
            } catch (e) {
              errorText = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏";
            }

            // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º –∫–æ–¥–æ–º, –Ω–µ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å
            if (
              errorText.includes("invalid_request") ||
              errorText.includes("authorization code") ||
              errorText.includes(
                "Value passed for the authorization code was invalid"
              )
            ) {
              throw new Error(
                `–ö–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω: ${response.status}, ${errorText}`
              );
            }

            throw new Error(
              `HTTP error! Status: ${response.status}, Text: ${errorText}`
            );
          }

          let responseData;
          try {
            responseData = await response.json();
          } catch (e) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ JSON [${requestId}]:`, e);
            throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞");
          }

          return responseData;
        }, 1); // –¢–æ–ª—å–∫–æ –æ–¥–Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞

        console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ [${requestId}]:`, {
          username: data.username,
          user_id: data.user_id,
          hasAccessToken: !!data.access_token,
          hasEncryptedToken: !!data.encrypted_access_token,
        });

        if (!data || !data.username) {
          console.error(
            `‚ùå –ü–æ–ª—É—á–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ [${requestId}]:`,
            data
          );
          throw new Error("Invalid response from server");
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        setTwitterName?.(data.username);
        localStorage.setItem("twitterName", data.username);
        localStorage.setItem("twitterUserId", data.user_id);
        localStorage.setItem("isTwitterConnected", "true");
        localStorage.setItem("userAuthenticated", "true");

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω—ã
        if (data.encrypted_access_token) {
          localStorage.setItem(
            "encryptedAccessToken",
            data.encrypted_access_token
          );
          sessionStorage.setItem(
            "encryptedAccessToken",
            data.encrypted_access_token
          );
        }

        if (data.access_token) {
          localStorage.setItem("accessToken", data.access_token);
          sessionStorage.setItem("accessToken", data.access_token);
        }

        // –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
        sessionStorage.setItem("auth_processed", "true");
        sessionStorage.removeItem("auth_processing");

        return data.username;
      } catch (error: any) {
        // console.error(
        //   `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞ Twitter [${requestId}]:`,
        //   error
        // );

        // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –∏—Å—Ç–µ–∫—à–∏–º –∫–æ–¥–æ–º, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–≤—Ç–æ—Ä–Ω—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        if (
          error.message &&
          (error.message.includes("500") ||
            error.message.includes("401") ||
            error.message.includes("invalid_request") ||
            error.message.includes("authorization code"))
        ) {
          // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
          sessionStorage.removeItem("code");
          sessionStorage.removeItem("verifier");
          sessionStorage.removeItem("auth_processed");
          sessionStorage.removeItem("auth_processing");
        }

        throw error;
      }
    },
    [setTwitterName]
  );

  return {
    switchNetwork: handleSwitchNetwork,
    reconnectWallet: handleReconnectWallet,
    reconnectTwitter: handleReconnectTwitter,
    fetchTwitterAccessToken: handleFetchTwitterAccessToken,
    checkNetwork,
    setupNetworkMonitoring,
  };
};
